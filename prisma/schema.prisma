// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// can use provider as sqlite too instead of postgres
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// id - primary key, userId -> id of the owner of form, content -> contains json in stringified form, shareURL -> we provide separate id instead of sharing our own id
model Form {
  id              Int               @id @default(autoincrement())
  userId          String
  createdAt       DateTime          @default(now())
  published       Boolean           @default(false)
  name            String
  description     String            @default("")
  content         String            @default("[]")

  visits          Int               @default(0)
  submissions     Int               @default(0)

  shareURL        String            @default(uuid())
  FormSubmissions FormSubmissions[]

  // A user cannot create 2 forms with the same name, so we add unique constraint
  @@unique([name, userId])
}

// formId -> to use for relation with the form model, content -> it will contain stringified form submissions
model FormSubmissions {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  formId    Int
  form      Form     @relation(fields: [formId], references: [id])

  content String
}
